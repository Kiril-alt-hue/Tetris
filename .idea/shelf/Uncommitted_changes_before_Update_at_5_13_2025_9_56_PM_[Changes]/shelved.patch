Index: View.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pygame\r\n\r\nclass View:\r\n    def __init__(self):\r\n        pygame.init()\r\n        self.screen = pygame.display.set_mode((600, 800))\r\n        pygame.display.set_icon(pygame.image.load('icon.png'))\r\n        pygame.display.set_caption(\"Тетріс\")\r\n        self.BLOCK_SIZE = 40\r\n        self.GRID_HEIGHT = 650\r\n        self.FALL_EVENT = pygame.USEREVENT + 1\r\n        self.score = 0\r\n        # self.paused = False\r\n        self.start_button = Button([200, 300, 200, 150], (100, 200, 100), \"Start Game\")\r\n        pygame.time.set_timer(self.FALL_EVENT, 1500)\r\n\r\n    def draw_menu(self):\r\n        in_menu = True\r\n        while in_menu:  # Цикл меню\r\n            self.screen.fill((33, 33, 33))  # Заповнення екрану чорним\r\n            self.start_button.draw_button(self.screen)  # Малювання кнопки\r\n            pygame.display.flip()  # Оновлення екрану\r\n\r\n            for event in pygame.event.get():  # Обробка подій\r\n                if event.type == pygame.QUIT:  # Вихід із гри\r\n                    pygame.quit()\r\n                    return\r\n                elif event.type == pygame.MOUSEBUTTONDOWN:  # Натискання миші\r\n                    if self.start_button.is_clicked(event.pos):  # Початок гри\r\n                        in_menu = False\r\n\r\n    def draw_grid(self):\r\n        #сітка\r\n        for x in range(0, 600, self.BLOCK_SIZE):\r\n            pygame.draw.line(self.screen, (28, 28, 28), (x, 0), (x, self.GRID_HEIGHT), 3) #змінила товщину на 3\r\n        for y in range(0, self.GRID_HEIGHT, self.BLOCK_SIZE):\r\n            pygame.draw.line(self.screen, (28, 28, 28), (0, y), (600, y), 3) #змінила товщину на 3\r\n\r\n    def draw_platform(self):\r\n        #платформа\r\n        pygame.draw.rect(self.screen, (50, 50, 50), (0, self.GRID_HEIGHT, 600, 150))\r\n        pygame.draw.rect(self.screen, (255, 194, 236), (0, self.GRID_HEIGHT, 600, 150), 3)\r\n\r\n    def draw_piece(self, piece):\r\n        px, py = piece.position\r\n        for dx, dy in piece.coordinates:\r\n            x = (px + dx) * self.BLOCK_SIZE\r\n            y = (py + dy) * self.BLOCK_SIZE\r\n            # Малюємо лише в межах GRID_HEIGHT\r\n            if 0 <= y < self.GRID_HEIGHT and 0 <= x < 600:\r\n                pygame.draw.rect(self.screen, piece.color, (x, y, self.BLOCK_SIZE, self.BLOCK_SIZE))\r\n                pygame.draw.rect(self.screen, (0, 0, 0), (x, y, self.BLOCK_SIZE, self.BLOCK_SIZE), 2)\r\n\r\n    def draw_board(self, board):\r\n        for y in range(16): # Можливе вирішення багу (воно працює!!!)\r\n            for x in range(15):  # Змінено з 10 на 15 для відображення повного поля\r\n                if board[y][x] != 0:\r\n                    pygame.draw.rect(\r\n                        self.screen,\r\n                        board[y][x],\r\n                        (x * self.BLOCK_SIZE, y * self.BLOCK_SIZE, self.BLOCK_SIZE, self.BLOCK_SIZE)\r\n                    )\r\n                    pygame.draw.rect(\r\n                        self.screen,\r\n                        (0, 0, 0),\r\n                        (x * self.BLOCK_SIZE, y * self.BLOCK_SIZE, self.BLOCK_SIZE, self.BLOCK_SIZE),\r\n                        2\r\n                    )\r\n\r\n    def draw_score(self, score):\r\n        font = pygame.font.Font(None, 90)\r\n        score_text = font.render(f\"{score}\", True, (255, 194, 236))\r\n        self.screen.blit(score_text, (400, 655)) #змінено для виводу\r\n\r\n    def draw_pause_on_off(self, paused, piece, board, score):\r\n        if not paused:  # Малювання гри\r\n            self.screen.fill((33, 33, 33))\r\n            self.screen.set_clip(0, 0, 600, self.GRID_HEIGHT)\r\n            self.draw_grid()\r\n            self.draw_piece(piece)\r\n            self.draw_board(board)\r\n            self.screen.set_clip(None)\r\n            self.draw_platform()\r\n            self.draw_score(score)\r\n        else:  # Малювання паузи\r\n            font = pygame.font.Font(None, 48)\r\n            pause_text = font.render(\"Paused\", True, (255, 255, 255))\r\n            self.screen.blit(pause_text, (250, 400))\r\n        pygame.display.flip()\r\n\r\n    def draw_game_over_screen(self):\r\n        font = pygame.font.Font(None, 48)\r\n        game_over_text = font.render(\"Game Over\", True, (255, 0, 0))\r\n        score_text = font.render(f\"Final Score: {self.score}\", True, (255, 255, 255))\r\n        restart_text = font.render(\"Press R to Restart\", True, (255, 255, 255))\r\n        self.screen.fill((33, 33, 33))  # Заповнення екрану\r\n        self.screen.blit(game_over_text, (150, 300))\r\n        self.screen.blit(score_text, (150, 350))\r\n        self.screen.blit(restart_text, (150, 400))\r\n        pygame.display.flip()\r\n\r\n\r\nclass Button:\r\n    def __init__(self, size : list, color, text):\r\n        self.x = size[0]\r\n        self.y = size[1]\r\n        self.w = size[2]\r\n        self.h = size[3]\r\n        self.color = color\r\n        self.text = text\r\n        self.font = pygame.font.SysFont(None, 50)\r\n        self.rect = pygame.Rect(self.x, self.y, self.w, self.h)\r\n\r\n    def draw_button(self, surface):\r\n        pygame.draw.rect(surface, self.color, self.rect)\r\n        text_surface = self.font.render(self.text, True, (255, 255, 255))\r\n        text_rect = text_surface.get_rect(center=self.rect.center)\r\n        surface.blit(text_surface, text_rect)\r\n\r\n    def is_clicked(self, pos):\r\n        return self.rect.collidepoint(pos)
===================================================================
diff --git a/View.py b/View.py
--- a/View.py	(revision 5a6a40b395db7fa371946e761c8a6d32ac50e3b2)
+++ b/View.py	(date 1746732746522)
@@ -4,7 +4,7 @@
     def __init__(self):
         pygame.init()
         self.screen = pygame.display.set_mode((600, 800))
-        pygame.display.set_icon(pygame.image.load('icon.png'))
+        pygame.display.set_icon(pygame.image.load('view/icon.png'))
         pygame.display.set_caption("Тетріс")
         self.BLOCK_SIZE = 40
         self.GRID_HEIGHT = 650
